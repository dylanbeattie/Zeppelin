// Zeppelin.peg : parsing expression grammar for Zeppelin

program<SyntaxNode> = p:block EOF { p }

block<BlockNode>
    = head:statement EOL tail:block { new BlockNode(head).Concat(tail) }
    / line:statement { new BlockNode(line) }

statement<SyntaxNode> = assignment / output

assignment<AssignNode> 
    = 'let' _ v:variable _ 'be' _ e:expression
        { new AssignNode(v, e) }

variable<VariableNode>
    = name:("" [A-Za-z]+) { new VariableNode(name) }

output<OutputNode> = 'say' _ e:expression { new OutputNode(e) }

expression<SyntaxNode> 
    = product

product<SyntaxNode>
    = lhs:addition _ '*' _ rhs:product 
        { new BinaryNode(Operator.Multiply, lhs,rhs) }
    / addition
    
addition<SyntaxNode> 
    = lhs:value _ '+' _ rhs:addition 
        { new BinaryNode(Operator.Add, lhs, rhs) }
    / value 

value<SyntaxNode> = lookup / number

lookup<LookupNode> = v:variable { new LookupNode(v) }

number<NumberNode> = n:("" [0-9]+) { new NumberNode(decimal.Parse(n)) }

whitespace = [\t ]
_ = whitespace+

EOL = '\n'
EOF = !.
